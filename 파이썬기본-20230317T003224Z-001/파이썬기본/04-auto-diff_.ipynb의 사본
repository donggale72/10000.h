{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"116qNS9C3zacA7qLKd7Sv9R64bQNuyO5o","timestamp":1672992881135}],"collapsed_sections":["AOsBB1gsP01U"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"OabPsNJJP1Tx"},"source":["# 자동미분"]},{"cell_type":"code","metadata":{"id":"R1pPX7WDLcPg"},"source":["import numpy as np\n","import sympy \n","import torch"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AOsBB1gsP01U"},"source":["## 포워드모드 자동미분"]},{"cell_type":"markdown","metadata":{"id":"W7Ox_Df4c12K"},"source":["$$\n","f(\\mathbf{x}) = \\frac{x_1 x_2 \\sin(x_3) + e^{x_1 x_2}}{x_3}\n","$$"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"upshgGFQLkLv","executionInfo":{"status":"ok","timestamp":1631869776283,"user_tz":-540,"elapsed":1058,"user":{"displayName":"조준우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0ZgKQRudtiTb-9MCS5s1P2RcfWz3M_eA-kdDe4g=s64","userId":"07581913480846489655"}},"outputId":"0152f5ee-e2a8-46db-dc74-6f6d80f0f24a"},"source":["##########################################\n","# 다음 함수에 대해서 해서적으로 도함수를 구합니다.\n","# f(x) = (x1*x2*sin(x3) + exp(x1*x2)) / x3\n","\n","# 손미분하기 복잡하니까 sympy를 이용해서 해석적으로 도함수를 구하고...\n","x1 = sympy.Symbol('x1')\n","x2 = sympy.Symbol('x2')\n","x3 = sympy.Symbol('x3')\n","\n","print(sympy.simplify(sympy.diff((x1*x2*sympy.sin(x3)+sympy.E**(x1*x2))/x3, x1)))\n","print(sympy.simplify(sympy.diff((x1*x2*sympy.sin(x3)+sympy.E**(x1*x2))/x3, x2)))\n","print(sympy.simplify(sympy.diff((x1*x2*sympy.sin(x3)+sympy.E**(x1*x2))/x3, x3)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["x2*(exp(x1*x2) + sin(x3))/x3\n","x1*(exp(x1*x2) + sin(x3))/x3\n","(x1*x2*x3*cos(x3) - x1*x2*sin(x3) - exp(x1*x2))/x3**2\n"]}]},{"cell_type":"code","metadata":{"id":"5G7AzJbrL3-Z"},"source":["def my_func(x1, x2, x3):\n","    return (x1*x2*np.sin(x3)+np.exp((x1*x2)))/x3;\n","\n","def dmy_func(x1, x2, x3):\n","    \"\"\"\n","    sympy로 구한 도함수\n","    \"\"\"\n","    dx1 = x2*(np.exp(x1*x2) + np.sin(x3))/x3\n","    dx2 = x1*(np.exp(x1*x2) + np.sin(x3))/x3\n","    dx3 = (x1*x2*x3*np.cos(x3) - x1*x2*np.sin(x3) - np.exp(x1*x2)) / x3**2\n","    \n","    return dx1, dx2, dx3"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5_yFhK0qL8zF"},"source":["##########################################################\n","# 주어진 함수에 대해 포워드 모드로 미분계수를 구하는 함수\n","# 포워드모드 자동미분을 사용함\n","\n","def autodiff_forward_mode(x, p) :\n","    \"\"\"\n","    자동 미분 포워드 모드 코드\n","    x : 미분을 계산하고자 하는 변수값\n","    p : x에서의 p방향으로의 방향미분을 구할 방향 p, seed vector\n","    \"\"\"\n","    x1 = x[0]; x2 = x[1]; x3 = x[2];\n","\n","    # 기본 변수 x1, x2, x3의 p방향으로의 방향미분은 p의 각 방향 성분입니다.\n","    # 왜냐하면\n","    # x1이라는 변수는 x1에 대한 항등함수고 x2, x3에 대한 함수는 \n","    # 아니므로 Del(x1) = (1, 0, 0)이 되고 결국 p로의 x1의 방향미분은\n","    # 방향미분의 정의에 의해 Del(x1) dot p = p[0]이 됩니다.\n","    Dp_x1 = p[0] \n","    Dp_x2 = p[1]\n","    Dp_x3 = p[2]\n","\n","    # 이제 방향미분이 다음과 같은 연쇄법칙을 만족시키는 성질을 이용해서\n","    # 함숫값까지 전진(forward)하면서 함숫값과 미분계수를 동시에 구합니다.\n","    # c = f(a,b) 일때 c에 대한 p로의 방향미분은\n","    # Dp(c) = (dc/da)Dp(a) + (dc/db)Dp(b)\n","    # 즉 c의 변수 a, b에 대한 p로의 방향미분계수를 알고 있으면\n","    # c에 대한 a, b의 편미분 계수만 구하면 바로 c에 대한 p로의 \n","    # 방향미분 계수를 구할 수 있습니다.\n","\n","    # 아래 코드를 슬라이드의 함수 그래프와 함께 순서대로 따라가면서\n","    # 주의깊게 보면 위에서 설명한 규칙을 반복적으로 적용한 것에 지나지\n","    # 않음을 알 수 있습니다.\n","\n","    # 노드의 값        방향 미분값\n","    a = x1*x2;         Dp_a = x2*Dp_x1 + x1*Dp_x2; # 변수 a의 p방향으로의 방향미분\n","    b = np.sin(x3);    Dp_b = np.cos(x3)*Dp_x3;\n","    c = x1*x2;         Dp_c = x2*Dp_x1 + x1*Dp_x2;\n","    d = a*b;           Dp_d = b*Dp_a + a*Dp_b;\n","    e = np.exp(c);     Dp_e = np.exp(c)*Dp_c;\n","    f = d+e;           Dp_f = Dp_d + Dp_e;\n","    g = 1/x3;          Dp_g = -(1/(x3**2))*Dp_x3;\n","    h = f*g;           Dp_h = g*Dp_f + f*Dp_g;\n","\n","    return h, Dp_h\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pdSYpH8rMIcU","executionInfo":{"status":"ok","timestamp":1631869776284,"user_tz":-540,"elapsed":31,"user":{"displayName":"조준우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0ZgKQRudtiTb-9MCS5s1P2RcfWz3M_eA-kdDe4g=s64","userId":"07581913480846489655"}},"outputId":"daf1167d-d456-42c0-f4ce-448d67288160"},"source":["# 모든 변수에 대한 미분값을 구하기 위해서는 총 변수 수 만큼 포워드 패스를 수행 \n","x = (1, 2, np.pi/2)\n","\n","# p로의 방향마분을 구하는 함수를 이전 셀에서 만들었으므로\n","# 방향 p를 x축 방향으로 (1,0,0)으로 설정하고 p로의 방향미분계수를 구하면\n","# 그것이 곧 x로의 편미분 계수가 될 것입니다.\n","# 이런 작업을 p=(0,1,0), p=(0,0,1)에 대해서 반복하면서 모든 편미분계수를\n","# 구할 수 있습니다.\n","print(\"forward mode auto diff.: dx1={:f}, dx2={:f}, dx3={:f}\".format(\n","    autodiff_forward_mode(x, np.array([1,0,0]))[1],\n","    autodiff_forward_mode(x, np.array([0,1,0]))[1],\n","    autodiff_forward_mode(x, np.array([0,0,1]))[1] \n","    ) \n",")\n","\n","deriv = dmy_func(*x)\n","\n","print(f\"analytic sol.          : dx1={deriv[0]:.6f}, dx2={deriv[1]:.6f}, dx3={deriv[2]:.6f}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["forward mode auto diff.: dx1=10.681278, dx2=5.340639, dx3=-3.805241\n","analytic sol.          : dx1=10.681278, dx2=5.340639, dx3=-3.805241\n"]}]},{"cell_type":"markdown","metadata":{"id":"HjZN2jN2P8LP"},"source":["## 파이토치 자동미분"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gGmu2tbdMeDd","executionInfo":{"status":"ok","timestamp":1669554894112,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"a2fdfa0e-d178-4aad-aab1-8d22c8491cba"},"source":["# 미분 가능한 변수인 파이토치 텐서 x를 정의하고[+]\n","x = torch.tensor([1.0], requires_grad=True)\n","\n","# x로 함수를 정의, 이렇게 연산을 하면 자동으로 그래프가 만들어짐[+]\n","f = (x**2 + 2*x) * torch.log(x)\n","\n","# 변수값 출력\n","print(x)\n","print(f)\n","\n","# x.grad에는 f의 x에 대한 미분 계수가 저장됨\n","print(x.grad)\n","\n","# x에 대한 미분 계수를 구하기 위해 처음으로 미분해야하는 함수\n","print(f.grad_fn)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([1.], requires_grad=True)\n","tensor([0.], grad_fn=<MulBackward0>)\n","None\n","<MulBackward0 object at 0x7fb65f660bd0>\n"]}]},{"cell_type":"markdown","metadata":{"id":"JgQX-XCkQmRp"},"source":["### torch.autograd.backward\n","\n","- 계산 그래프 상에서 말단 노드에 미분계수를 구함(단, 그 노드 변수가 `requires_grad=True`일 경우)"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n6R1wScvQMqe","executionInfo":{"status":"ok","timestamp":1669554894443,"user_tz":-540,"elapsed":4,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"f20b62da-b9e8-4bed-fa5e-503fb72e5408"},"source":["# x가 마지막 노드인가? \n","# backward()함수는 마지막 노드까지 역전파하면서 미분계수를 구합니다.\n","print(x.is_leaf)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5FMKxE9-QjsP","executionInfo":{"status":"ok","timestamp":1669554895395,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"781a4fc0-f946-4a9d-dddc-d659b2f287da"},"source":["# f를 백워드해서 f를 만들기 위해 구성된 계산 그래프의 말단 노드까지 역방향\n","# 으로 진행하면서 말단 노드의 미분계수를 구함[+]\n","\n","# grad_tensors\n","# 출발 노드에 제공하는 이전 노드까지의 \n","# 미분 계수로 여기서는 이전 노드가 없으므로 1로 설정, 설장하지 않으면 기본 1\n","\n","# retain_grad\n","# 계산 그래프는 한번 백워드를 하면 메모리에서 사라지는 것이 기본인데\n","# 여기선 사라지지 않게 하기 위해 True로 설정, 기본은 False\n","\n","torch.autograd.backward(\n","    f, \n","    grad_tensors=torch.tensor([1.]), \n","    retain_graph=True\n",")\n","print(x.grad)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["tensor([3.])\n"]}]},{"cell_type":"markdown","metadata":{"id":"RJDYJeV1RarO"},"source":["### torch.autograd.grad"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KVq89hqzRYvp","executionInfo":{"status":"ok","timestamp":1669554902688,"user_tz":-540,"elapsed":262,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"e5cd2ff0-540b-4f0b-a6fb-90db4c2ea1a1"},"source":["# 백워드와 달리 명시적으로 미분할 변수를 지정[+]\n","# 미분할 변수를 여러개 지정할 수 있기 때문에 반환값은 튜플로 변환됨\n","\n","df = torch.autograd.grad(\n","    f, \n","    x, \n","    retain_graph=True\n",")\n","print(df)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(tensor([3.]),)\n"]}]},{"cell_type":"markdown","metadata":{"id":"wKoaXY1PRsbQ"},"source":["### 다변수 함수 편미분"]},{"cell_type":"markdown","metadata":{"id":"4Hru51eKR0WG"},"source":["다음 식에 대해서 $x=1, y=2$에서 편미분 계수를 구하세요.\n","\n","$$\n","f(x,y)= (x^2 + 2x) \\ln(y)\n","$$"]},{"cell_type":"markdown","metadata":{"id":"6JLvYn1iSL2r"},"source":["#### 심파이"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TvU_k6rRSSH0","executionInfo":{"status":"ok","timestamp":1669554985217,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"aded57f4-69a7-40ea-edfa-2e5b1b8b748e"},"source":["# 손미분하기 복잡하니까 sympy를 이용해서 해석적으로 도함수를 구함\n","x = sympy.Symbol('x')\n","y = sympy.Symbol('y')\n","f = (x**2 + 2*x) * sympy.log(y)\n","\n","# 심파이 simplify, diff를 이용한 미분, 도함수를 구함[+]\n","f_dx = sympy.simplify(sympy.diff(f, x))\n","f_dy = sympy.simplify(sympy.diff(f, y))\n","\n","f_dx, f_dy\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2*(x + 1)*log(y), x*(x + 2)/y)"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LGauQCclSr59","executionInfo":{"status":"ok","timestamp":1669554993702,"user_tz":-540,"elapsed":264,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"40fb3221-2200-451b-9a2c-f1578834a40e"},"source":["# (1, 2)에서 미분 계수를 계산\n","\n","dx = f_dx.subs({x:1.0, y:2.0})\n","dy = f_dy.subs({x:1.0, y:2.0})\n","\n","print(f\"{dx:.6f}, {dy:.6f}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.772589, 1.500000\n"]}]},{"cell_type":"markdown","metadata":{"id":"1nvJVZmgSKB2"},"source":["#### pytorch"]},{"cell_type":"code","metadata":{"id":"bcjqvz7JRdlv"},"source":["# 같은 작업을 파이토치로 다시 수행\n","\n","# 변수와 함수 정의\n","x = torch.tensor([1.0], requires_grad=True)\n","y = torch.tensor([2.0], requires_grad=True)\n","f = (x**2 + 2*x) * torch.log(y)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AOYjjhKHSBpa","executionInfo":{"status":"ok","timestamp":1669555035353,"user_tz":-540,"elapsed":273,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"14623206-6d0a-4354-ea18-24356efd0d57"},"source":["# backward()\n","# 백워드 한번에 x, y에 대한 미분 계수 모두 구해짐\n","torch.autograd.backward(\n","    f, \n","    retain_graph=True\n",")\n","print(f\"{x.grad.item():.6f}, {y.grad.item():.6f}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.772589, 1.500000\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YjKpPIFxTcPo","executionInfo":{"status":"ok","timestamp":1631869776635,"user_tz":-540,"elapsed":356,"user":{"displayName":"조준우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0ZgKQRudtiTb-9MCS5s1P2RcfWz3M_eA-kdDe4g=s64","userId":"07581913480846489655"}},"outputId":"28484966-ee5b-4c34-af6c-f7762636af03"},"source":["# grad()\n","# 미분할 변수 (x,y)를 직접 지정하여 반환값으로 미분계수 두개를 넘겨 받음\n","df = torch.autograd.grad(\n","    f, \n","    (x, y), \n","    retain_graph=True\n",")\n","print(f\"{df[0].item():.6f}, {df[1].item():.6f}\")\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2.772589, 1.500000\n"]}]},{"cell_type":"markdown","metadata":{"id":"vMq-OYJmT2J-"},"source":["## 자동미분 구현"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Tvb9BGscaGR_","executionInfo":{"status":"ok","timestamp":1669555288536,"user_tz":-540,"elapsed":263,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"166108e9-440e-4c8c-859f-3c47f75daf5b"},"source":["#################################\n","# 곱하기 함수와 도함수\n","\n","def times(x, y):\n","    # 어떤 연산을 하는 함수는 연산의 결과와 미분할 때 사용할 정보를 되돌리는 규칙으로 코딩\n","    # 여기서는 앞에 결과를 되돌리고 뒤에 입력을 되돌림\n","    # 왜냐하면 미분하는 과정에서 입력을 다시 사용하기 때문\n","    return x*y, (x,y)\n","\n","def times_deriv(cache, dout=1):\n","    # times함수에서 함숫값을 계산하면서 되돌려준 입력을 받아서 \n","    # 그 입력에 대한 미분계수를 구함\n","    # 입력변수는 항상 두개이기때문에 미분계수도 두개 리턴\n","    # 이때 dout이라는 더 윗부분에 합성된 함수의 미분계수를 받아서 곱해줘야 함\n","    return cache[1]*dout, cache[0]*dout\n","\n","TIMES = {'f': times, 'df': times_deriv}\n","\n","v, cache = TIMES['f'](2,3)\n","dx, dy = TIMES['df'](cache)\n","\n","print(\"dx={}, dy={}\".format(dx, dy))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["dx=3, dy=2\n"]}]},{"cell_type":"markdown","metadata":{"id":"lJX-Qf3vaR_d"},"source":["다음 식에 대해서 $x=1, y=2$에서 편미분 계수를 구하기 위해 필요한 단위 함수를 만드세요.\n","\n","$$\n","f(x,y)= (x^2 + 2x) \\ln(y)\n","$$"]},{"cell_type":"code","metadata":{"id":"C0xhtgCVaXXl"},"source":["# 더하기 함수와 도함수\n","def add(x, y):\n","    #################################\n","    # WRITE YOUR CODE HERE\n","    return x+y, (x, y)\n","\n","def add_deriv(cache, dout=1):\n","    #################################\n","    # WRITE YOUR CODE HERE\n","    return dout, dout\n","\n","ADD = {'f': add, 'df': add_deriv}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPLVH9_hYIIE","executionInfo":{"status":"ok","timestamp":1669555295255,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"55ca2a7c-61d2-4c41-a942-fe65e73b2dd7"},"source":["#################################\n","# 더하기 자동미분 테스트 코드\n","# 이 코드에 대한 테스트 결과가 다음과 같이 나와야 합니다.\n","# v: 7, cache:(3, 4)\n","# dx: 10.2, dy: 10.2\n","\n","x, y = 3, 4\n","dout = 10.2\n","\n","v, cache = ADD['f'](x, y)\n","print(f\"v: {v}, cache:{cache}\")\n","\n","dx, dy = ADD['df'](cache, dout)\n","print(f\"dx: {dx}, dy: {dy}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["v: 7, cache:(3, 4)\n","dx: 10.2, dy: 10.2\n"]}]},{"cell_type":"code","metadata":{"id":"zUCGtzLLaXUp"},"source":["#################################\n","# [*] 로그 함수와 도함수\n","def log(x):\n","    #################################\n","    # WRITE YOUR CODE HERE\n","    # log 계산을 위해 np.log()를 사용하세요.\n","    return np.log(x), x\n","\n","def log_deriv(cache, dout=1):\n","    #################################\n","    # WRITE YOUR CODE HERE\n","    return (1/cache)*dout\n","\n","LOG = {'f': log, 'df': log_deriv}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"L6b4iA7fYMcp","executionInfo":{"status":"ok","timestamp":1669555323439,"user_tz":-540,"elapsed":265,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"73cf910b-77fb-4067-854c-df25fa6b9521"},"source":["#################################\n","# 로그 자동미분 테스트 코드\n","# 이 코드에 대한 테스트 결과가 다음과 같이 나와야 합니다.\n","# v: 1.1755733298042381, cache:3.24\n","# dx: 2.253086419753086\n","\n","x = 3.24\n","dout = 7.3\n","\n","v, cache = LOG['f'](x)\n","print(f\"v: {v}, cache:{cache}\")\n","\n","dx = LOG['df'](cache, dout)\n","print(f\"dx: {dx}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["v: 1.1755733298042381, cache:3.24\n","dx: 2.253086419753086\n"]}]},{"cell_type":"markdown","metadata":{"id":"FphD_GjEahKq"},"source":["만들어진 함수들로 예제 다변수 함수를 직접 미분해보세요."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wKPHUHuUaXSM","executionInfo":{"status":"ok","timestamp":1669555432349,"user_tz":-540,"elapsed":265,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"97dd9552-2ba7-419b-82e7-9bbea262fa6c"},"source":["####################################################\n","# WRITE YOUR CODE HERE\n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# forward pass f(x) = 2.079442\n","# backward pass dx = 2.772589, dy = 1.500000\n","\n","# 다음 위치에서 (x**2 + 2*x)*log(y) 에 대한 미분계수 구하기\n","x = 1.; y = 2.\n","\n","# 함숫값 구하기\n","a, cache_a = TIMES['f'](x, x)\n","b, cache_b = TIMES['f'](2, x)\n","c, cache_c = ADD['f'](a, b)\n","d, cache_d = LOG['f'](y)\n","z, cache_z = TIMES['f'](c, d)\n","print(\"forward pass f(x) = {:.6f}\".format(z))\n","\n","dx = dy = 0.\n","dc, dd = TIMES['df'](cache_z, 1)\n","dy = LOG['df'](cache_d, dd)\n","da, db = ADD['df'](cache_c, dc)\n","_, dx_ = TIMES['df'](cache_b, db); dx+=dx_;\n","dx_, dx__ = TIMES['df'](cache_a, da); dx+=dx_+dx__;\n","print(\"backward pass dx = {:.6f}, dy = {:.6f}\".format(dx, dy))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["forward pass f(x) = 2.079442\n","backward pass dx = 2.772589, dy = 1.500000\n"]}]},{"cell_type":"markdown","metadata":{"id":"6NhXYqw1atDq"},"source":["상류층 미분계수를 2로 주고 미분게수를 구하고 파이토치에서 같은 작업을 수행해 결과를 비교하세요."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kskYeigZa0Wk","executionInfo":{"status":"ok","timestamp":1669555442367,"user_tz":-540,"elapsed":683,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"738561ab-ec3b-45c4-c1a7-e9e6d7d5d43e"},"source":["####################################################\n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# forward pass f(x) = 2.079442\n","# backward pass dx = 5.545177, dy = 3.000000\n","\n","x = 1.; y = 2.\n","\n","a, cache_a = TIMES['f'](x, x)\n","b, cache_b = TIMES['f'](2, x)\n","c, cache_c = ADD['f'](a, b)\n","d, cache_d = LOG['f'](y)\n","z, cache_z = TIMES['f'](c, d)\n","print(\"forward pass f(x) = {:.6f}\".format(z))\n","\n","dx = dy = 0.\n","dc, dd = TIMES['df'](cache_z, 2)\n","dy = LOG['df'](cache_d, dd)\n","da, db = ADD['df'](cache_c, dc)\n","_, dx_ = TIMES['df'](cache_b, db); dx+=dx_;\n","dx_, dx__ = TIMES['df'](cache_a, da); dx+=dx_+dx__;\n","print(\"backward pass dx = {:.6f}, dy = {:.6f}\".format(dx, dy))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["forward pass f(x) = 2.079442\n","backward pass dx = 5.545177, dy = 3.000000\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AlertShrazWe","executionInfo":{"status":"ok","timestamp":1669555453721,"user_tz":-540,"elapsed":263,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"7f38965f-2541-42af-a556-b85e080ee3f4"},"source":["# 파이토치를 사용한 자동미분에서 상류층 미분계수를 2로 주고 계산하면\n","# 위 셀과 동일한 계산 결과가 나와야 합니다.\n","x = torch.tensor([1.], requires_grad=True)\n","y = torch.tensor([2.], requires_grad=True)\n","\n","z = (x**2 + 2*x)*torch.log(y)\n","\n","dz = torch.autograd.grad(z, (x,y), grad_outputs=torch.tensor([2.]), retain_graph=True)\n","print(dz)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(tensor([5.5452]), tensor([3.]))\n"]}]},{"cell_type":"markdown","metadata":{"id":"EoKzqA7aT3i6"},"source":["## 자동미분 클래스 구현[실습]"]},{"cell_type":"markdown","metadata":{"id":"lWD4lmk1a-DU"},"source":["실습 과제로 위에서 구현 함수와 도함수를 모두 포함하도록 클래스를 작성하세요."]},{"cell_type":"markdown","metadata":{"id":"qMGMsUG334s6"},"source":["### Add class"]},{"cell_type":"code","metadata":{"id":"2NjbD4WQT-WU"},"source":["# 더하기 클래스\n","class Add :\n","    def __init__(self):\n","        self.ret = 0.0\n","        self.dx = 0.0\n","        self.dy = 0.0\n","    \n","    def __call__(self, x, y):\n","        return self.forward(x,y)\n","\n","    def forward(self, x, y):\n","        self.ret = x + y\n","        \n","        return self.ret\n","\n","    def backward(self, dout):\n","        self.dx = dout * 1\n","        self.dy = dout * 1\n","\n","        return self.dx, self.dy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JbmbC67i3nlY"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ycKGcjP5xmpn","executionInfo":{"status":"ok","timestamp":1631869776644,"user_tz":-540,"elapsed":43,"user":{"displayName":"조준우","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj0ZgKQRudtiTb-9MCS5s1P2RcfWz3M_eA-kdDe4g=s64","userId":"07581913480846489655"}},"outputId":"eb723243-052e-4806-dc77-ca07382996af"},"source":["####################################################\n","# Add 클래스 테스트  \n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# Add forward : 9.23\n","# Add backward: (2, 2)\n","\n","x, y = 3.56, 5.67\n","add = Add()\n","\n","print(f\"Add forward : {add(x, y)}\")\n","print(f\"Add backward: {add.backward(2)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Add forward : 9.23\n","Add backward: (2, 2)\n"]}]},{"cell_type":"markdown","metadata":{"id":"qC2LSr-n38PR"},"source":["### Times class"]},{"cell_type":"code","metadata":{"id":"bIf184CzbGtM"},"source":["# 곱하기 클래스\n","class Times :\n","    def __init__(self):\n","        self.x = None\n","        self.y = None\n","        self.ret = 0.0\n","        self.dx = 0.0\n","        self.dy = 0.0\n","\n","    def __call__(self, x, y):\n","        return self.forward(x,y)\n","\n","    def forward(self, x, y):\n","        self.x = x\n","        self.y = y\n","        self.ret = x * y\n","        \n","        return self.ret\n","\n","    def backward(self, dout):\n","        #################################\n","        # WRITE YOUR CODE HERE\n","        self.dx = self.y * dout\n","        self.dy = self.x * dout\n","        #################################\n","        \n","        return self.dx, self.dy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ZI1reomR3oyq"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nwQAKLJzyR-D","executionInfo":{"status":"ok","timestamp":1669555471691,"user_tz":-540,"elapsed":276,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"f730b904-e35a-4a66-963b-247841c07dfb"},"source":["####################################################\n","# Times 클래스 테스트  \n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# Times forward : 20.185200000000002\n","# Times backward: (11.34, 7.12)\n","\n","x, y = 3.56, 5.67\n","times = Times()\n","\n","print(f\"Times forward : {times(x, y)}\")\n","print(f\"Times backward: {times.backward(2)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Times forward : 20.185200000000002\n","Times backward: (11.34, 7.12)\n"]}]},{"cell_type":"markdown","metadata":{"id":"6SOVkLfF4CCi"},"source":["### Log class"]},{"cell_type":"code","metadata":{"id":"M_h4zZnFbGqs"},"source":["##################################\n","# [*] 로그 클래스\n","class Log :\n","    def __init__(self):\n","        self.x = None\n","    \n","    def __call__(self, x):\n","        return self.forward(x)\n","\n","    def forward(self, x):\n","        self.x = x\n","\n","        return np.log(x)\n","\n","    def backward(self, dout):\n","        #################################\n","        # WRITE YOUR CODE HERE\n","        dx = dout * (1./self.x)\n","        #################################\n","        \n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"paEbKj3g3qDe"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"taIXsN-8yqH_","executionInfo":{"status":"ok","timestamp":1669555475197,"user_tz":-540,"elapsed":303,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"adcef6c2-0fb6-427e-cca4-b057c9bd4480"},"source":["####################################################\n","# Log 클래스 테스트  \n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# Log forward : 1.269760544863939\n","# Log backward: 0.5617977528089888\n","\n","x = 3.56\n","log_ = Log()\n","\n","print(f\"Log forward : {log_(x)}\")\n","print(f\"Log backward: {log_.backward(2)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Log forward : 1.269760544863939\n","Log backward: 0.5617977528089888\n"]}]},{"cell_type":"markdown","metadata":{"id":"Yrx5Yc0B4DvL"},"source":["### Exp class"]},{"cell_type":"code","metadata":{"id":"ei9Q-3TvbGou"},"source":["###################################################\n","# [*] 지수함수 클래스\n","class Exp :\n","    def __init__(self):\n","        self.x = None\n","    \n","    def __call__(self, x):\n","        return self.forward(x)\n","\n","    def forward(self, x):\n","        self.x = x \n","        \n","        return np.exp(x)\n","    \n","    def backward(self, dout):\n","        #################################\n","        # WRITE YOUR CODE HERE\n","        dx = np.exp(self.x)*dout\n","        #################################\n","\n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gZQ7l_uf3rPw"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"o3l25C0rzE0I","executionInfo":{"status":"ok","timestamp":1669555479705,"user_tz":-540,"elapsed":279,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"00497437-c532-415b-92a4-00f8d7f60447"},"source":["####################################################\n","# Exp 클래스 테스트  \n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# Exp forward : 35.163197145106615\n","# Exp backward: 70.32639429021323\n","\n","x = 3.56\n","exp_ = Exp()\n","\n","print(f\"Exp forward : {exp_(x)}\")\n","print(f\"Exp backward: {exp_.backward(2)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Exp forward : 35.163197145106615\n","Exp backward: 70.32639429021323\n"]}]},{"cell_type":"markdown","metadata":{"id":"b84kKanb4KPh"},"source":["### Inverse class"]},{"cell_type":"code","metadata":{"id":"3uoipHnZbq1j"},"source":["####################################################\n","# [*] 1/x 함수의 클래스\n","class Inverse :\n","    def __init__(self):\n","        self.x = None\n","    \n","    def __call__(self, x):\n","        return self.forward(x)\n","\n","    def forward(self, x) :\n","        self.x = x\n","        \n","        return 1./x\n","    \n","    def backward(self, dout):\n","        #################################\n","        # WRITE YOUR CODE HERE\n","        dx = -(1 / self.x**2)*dout\n","        #################################\n","        \n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"SSCGrs553sd7"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UhC48t99zVRM","executionInfo":{"status":"ok","timestamp":1669555482360,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"a174411f-1841-4b6c-8dff-d0bbd4b7603a"},"source":["####################################################\n","# Inverse 클래스 테스트  \n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# Inverse forward : 0.2808988764044944\n","# Inverse backward: -0.1578083575306148\n","\n","x = 3.56\n","inverse = Inverse()\n","\n","print(f\"Inverse forward : {inverse(x)}\")\n","print(f\"Inverse backward: {inverse.backward(2)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Inverse forward : 0.2808988764044944\n","Inverse backward: -0.1578083575306148\n"]}]},{"cell_type":"markdown","metadata":{"id":"BiG-qTRf4MQG"},"source":["### Sin class"]},{"cell_type":"code","metadata":{"id":"qmQlRd4vbGmL"},"source":["###############################################\n","# [*] sin 클래스\n","# d sin(x) / dx = cos(x)\n","class Sin:\n","    def __init__(self):\n","        self.x = None\n","        \n","    def __call__(self, x):\n","        return self.forward(x)\n","        \n","    def forward(self, x):\n","        self.x = x\n","        return np.sin(x)\n","    \n","    def backward(self, dout):\n","        #################################\n","        # WRITE YOUR CODE HERE\n","        # sin, cos은 np.sin(), np.cos()사용\n","        dx = np.cos(self.x)*dout\n","        ################################\n","\n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"7qMoQnaQ3uUp"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xQVGrwrbzkic","executionInfo":{"status":"ok","timestamp":1669555488186,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"3f73f13b-a421-406b-cab9-98b92f2e2347"},"source":["####################################################\n","# Sin 클래스 테스트  \n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# Sin forward : -0.4063057021444168\n","# Sin backward: -1.8274744062830894\n","\n","x = 3.56\n","sin_ = Sin()\n","\n","print(f\"Sin forward : {sin_(x)}\")\n","print(f\"Sin backward: {sin_.backward(2)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sin forward : -0.4063057021444168\n","Sin backward: -1.8274744062830894\n"]}]},{"cell_type":"markdown","metadata":{"id":"AgEutaXP4OO5"},"source":["### Cos class"]},{"cell_type":"code","metadata":{"id":"u8GuCEvubGjj"},"source":["###############################################\n","# [*] cos 클래스\n","# d cos(x) / dx = -sin(x)\n","class Cos:\n","    def __init__(self):\n","        self.x = None\n","    \n","    def __call__(self, x):\n","        return self.forward(x)\n","\n","    def forward(self, x):\n","        self.x = x\n","        return np.cos(x)\n","    \n","    def backward(self, dout):\n","        #################################\n","        # WRITE YOUR CODE HERE\n","        # sin, cos은 np.sin(), np.cos()사용\n","        dx = -np.sin(self.x)*dout\n","        #################################\n","\n","        return dx"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"avyJDMOP3xIT"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RiZycoOuz_ot","executionInfo":{"status":"ok","timestamp":1669555490967,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"cb477e3a-136c-4b53-d38b-2bf8f210340d"},"source":["####################################################\n","# Cos 클래스 테스트  \n","# 이 코드의 결과는 다음과 같이 나와야 합니다.\n","# Cos forward : -0.9137372031415447\n","# Cos backward: 0.8126114042888336\n","\n","x = 3.56\n","cos_ = Cos()\n","\n","print(f\"Cos forward : {cos_(x)}\")\n","print(f\"Cos backward: {cos_.backward(2)}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Cos forward : -0.9137372031415447\n","Cos backward: 0.8126114042888336\n"]}]},{"cell_type":"markdown","metadata":{"id":"4b1FlON82ohb"},"source":["지금 까지 단위 함수에 대한 미분을 직접해서 클래스로 모두 구현했습니다. 이제부터 이 클래스들을 이용해서 손으로 미분하기 복잡한 함수를 간단하게 미분해보도록 하겠습니다.\n"]},{"cell_type":"markdown","metadata":{"id":"4Zma7Jc7crz-"},"source":["## 다양함 함수에 대한 자동미분"]},{"cell_type":"markdown","metadata":{"id":"lIlAe4dXcwhv"},"source":["### 1. 포워드 모드에서 나왔던 함수의 자동미분\n","\n","슬라이드에서 첫번째 나왔던 함수를 리버스 모드 자동미분으로 미분해보세요.  \n","포워드 패스를 참고해서 백워드 패스를 적당히 코딩하세요.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"HaBba_LrdEj5"},"source":["$$\n","f(\\mathbf{x}) = \\frac{x_1 x_2 \\sin(x_3) + e^{x_1 x_2}}{x_3}, x_1=1, x_2=2, x_3=\\frac{\\pi}{2}\n","$$"]},{"cell_type":"code","metadata":{"id":"h_HnRuaictwk"},"source":["##################################################\n","# 위 함수에 대한 리버스모드 자동미분 구현\n","def my_func_graph(x1, x2, x3):\n","    # create gate\n","    a = Times()\n","    b = Sin()\n","    c = Times()\n","    d = Times()\n","    e = Exp()\n","    f = Add()\n","    g = Inverse()\n","    h = Times()\n","    \n","    #################################\n","    # [*] forward for function value\n","    a_fwd = a.forward(x1, x2)\n","    b_fwd = b.forward(x3)\n","    c_fwd = c.forward(x1,x2)\n","    d_fwd = d.forward(a_fwd,b_fwd)\n","    e_fwd = e.forward(c_fwd)\n","    f_fwd = f.forward(d_fwd,e_fwd)\n","    g_fwd = g.forward(x3)\n","    h_fwd = h.forward(f_fwd, g_fwd)\n","   \n","    #################################\n","    # WRITE YOUR CODE HERE\n","    # [*] backward for derivative\n","    h_bwd = h.backward(1)\n","    g_bwd = g.backward(h_bwd[1])\n","    f_bwd = f.backward(h_bwd[0])\n","    e_bwd = e.backward(f_bwd[1])\n","    d_bwd = d.backward(f_bwd[0])\n","    c_bwd = c.backward(e_bwd)\n","    b_bwd = b.backward(d_bwd[1])\n","    a_bwd = a.backward(d_bwd[0])\n","    \n","    dx1 = a_bwd[0]+c_bwd[0]\n","    dx2 = a_bwd[1]+c_bwd[1]\n","    dx3 = b_bwd+g_bwd\n","    #################################\n","    \n","    return h_fwd, dx1, dx2, dx3"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Bw0DGG-ndpCw","executionInfo":{"status":"ok","timestamp":1669555517060,"user_tz":-540,"elapsed":4,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"01ddb772-72c7-4aef-f1f4-e4d281254e35"},"source":["# 출력\n","# f=5.977259, dx1=10.681278, dx2=5.340639, dx3=-3.805241\n","\n","x = (1, 2, np.pi/2)\n","\n","# analytic sol.          : dx1=10.681278, dx2=5.340639, dx3=-3.805241\n","print(\"f={:f}, dx1={:f}, dx2={:f}, dx3={:f}\".format(*my_func_graph(*x)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["f=5.977259, dx1=10.681278, dx2=5.340639, dx3=-3.805241\n"]}]},{"cell_type":"markdown","metadata":{"id":"_X3xIPnBdKZn"},"source":["### 2. 로지스틱 시그모이드 함수에 대한 자동미분"]},{"cell_type":"markdown","metadata":{"id":"6uLvOaN-ilpz"},"source":["$$\n","\\sigma(x) = \\frac{1}{1+\\exp(-x)}, x=0.5\n","$$\n","\n","위 함수처럼 자주 쓰이는 함수는 기본 연산 클래스를 이용하여 다시 포워드패스와 백워드 패스를 메소드로 가지는 연산 클래스로 만들어두고 편리하게 사용할 수 있습니다.  \n","포워드 패스를 참고해서 백워드 패스를 적당히 코딩하세요."]},{"cell_type":"code","metadata":{"id":"rZhl869bdaaT"},"source":["# [*] 로지스틱 시그모이드 함수에 대한 포워드 백워드를 수행하는 클래스\n","class Logistic :\n","    def __init__(self):\n","        self.a = Times()\n","        self.b = Exp()\n","        self.c = Add()\n","        self.d = Inverse()\n","    \n","    def forward(self, x):\n","        #forward, function value\n","        a_fwd = self.a.forward(x, -1)\n","        b_fwd = self.b.forward(a_fwd)\n","        c_fwd = self.c.forward(b_fwd, 1)\n","        d_fwd = self.d.forward(c_fwd)\n","        # d_fwd = d.forward(c.forward(b.forward(a.forward(x, -1)), 1))\n","        # print(\"a_fwd:{:f}, b_fwd:{:f}, c_fwd:{:f}, d_fwd:{:f}\".format(a_fwd, b_fwd, c_fwd, d_fwd))\n","        return d_fwd\n","    \n","    def backward(self, dout):\n","        #######################################################\n","        # WRITE YOUR CODE HERE\n","        #backward, derivative\n","        d_bwd = self.d.backward(1)\n","        c_bwd = self.c.backward(d_bwd)\n","        b_bwd = self.b.backward(c_bwd[0])\n","        a_bwd = self.a.backward(b_bwd)\n","        \n","        # a_bwd = a.backward(b.backward(c.backward(d.backward(1))[0]))\n","        # print(\"a_bwd:{}, b_bwd:{:f}, c_bwd:{}, d_bwd:{:f}\".format(a_bwd, b_bwd, c_bwd, d_bwd))\n","        return a_bwd[0]*dout\n","        #######################################################\n","        \n","    \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"xfes_DDz3b9B"},"source":["아래 셀을 수행하여 위 셀이 바르게 작성되었는지 테스트 하세요. 출력은 주석과 같이 나와야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ULNu-pvbixTl","executionInfo":{"status":"ok","timestamp":1669555554723,"user_tz":-540,"elapsed":267,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"17baade7-85b2-4027-ebc8-15eb5680b2bd"},"source":["# 출력\n","# 1 / (1+np.exp(-0.500))               = 0.622459\n","# Logistic func. derivative at x=0.500 = 0.235004\n","\n","\n","# Function value by forward pass = 0.622459\n","# Derivative by backward pass    = 0.235004\n","\n","x = 0.5\n","y = 1 / (1+np.exp(-x))\n","\n","print(\"1 / (1+np.exp(-{:.3f}))               = {:f}\".format(x, y))       \n","print(\"Logistic func. derivative at x={:.3f} = {:f}\".format(x, (1-y)*y))  \n","print(\"\\n\")\n","\n","#f, b = logistic(x) \n","sigma = Logistic()\n","\n","print(\"Function value by forward pass = {:f}\".format(sigma.forward(x)))\n","print(\"Derivative by backward pass    = {:f}\".format(sigma.backward(1)))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1 / (1+np.exp(-0.500))               = 0.622459\n","Logistic func. derivative at x=0.500 = 0.235004\n","\n","\n","Function value by forward pass = 0.622459\n","Derivative by backward pass    = 0.235004\n"]}]},{"cell_type":"markdown","metadata":{"id":"fKOX2RDMaYLq"},"source":["### 3. 다음 함수에 대한 자동 미분\n","\n","$$\n","f(x,y)=\\frac{x+\\sigma(y)}{\\sigma(x)+(x+y)^2}, x=3, y=-4\n","$$\n","\n","위 함수는 [cs231n](http://cs231n.stanford.edu/) 이라는 수업에서 제시하는 [예제 함수](https://cs231n.github.io/optimization-2/)입니다. 아래 셀은 이 함수의 함숫값과 미분계수를 구하는 함수를 정의한 것입니다."]},{"cell_type":"code","metadata":{"id":"cG-T4gi5aXqB"},"source":["x = 3\n","y = -4\n","\n","# 함수값을 계산하는 함수\n","def my_func(x, y):\n","    \"\"\"\n","    Define analytic function\n","    \"\"\"\n","    return ( x + (1/(1+np.exp(-y))) ) / ( (1/(1+np.exp(-x))) + (x+y)**2 )\n","\n","# 직접 미분하여 코딩한 도함수\n","def dmy_func(x, y):\n","    sigma_x = 1/(1+np.exp(-x))\n","    sigma_y = 1/(1+np.exp(-y))\n","    \n","    numer = sigma_x + (x+y)**2 - ( (x+sigma_y)*((1-sigma_x)*sigma_x + 2*(x+y)) )\n","    denom = (sigma_x + (x+y)**2)**2\n","    dx = numer/denom\n","    \n","    numer = ((1-sigma_y)*sigma_y)*(sigma_x + (x+y)**2) - ( (x+sigma_y)*(2*(x+y)) )\n","    dy = numer/denom\n","    \n","    return dx, dy\n","\n","# 수치미분 함수\n","def dmy_func_numer(x, y):\n","    \"\"\"\n","    Numerical derivative to verify back-propagation\n","    \"\"\"\n","    h = 0.001\n","    dx = (my_func(x+h/2, y) - my_func(x-h/2,y)) / h\n","    dy = (my_func(x, y+h/2) - my_func(x,y-h/2)) / h\n","    \n","    return dx, dy"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kziiUC6m9VE1"},"source":["위 함수를 직접 포워드, 백워드 패스로 함숫값과 미분계수를 구해봅시다.\n","\n","코드 중단부터는 cs231n에서 쓰인 코드를 함께 제시 했습니다. 클래스와 되어서 읽기 힘들지만 동일한 연산을 하는 코드이고 출력 결과 모든 라인은 같은 숫자를 출력해야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yWdPV4YwbbgV","executionInfo":{"status":"ok","timestamp":1669555574457,"user_tz":-540,"elapsed":252,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"f06632cf-5f1b-4841-8b90-188256712e11"},"source":["# Analytic  : f=1.545645, dx=2.059570, dy=1.592233\n","# Numerical : f=1.545645, dx=2.059570, dy=1.592233\n","# Graph     : f=1.545645, dx=2.059570, dy=1.592233\n","# -------------------------------------------------------\n","# cs231n    : f=1.545645, dx=2.059570, dy=1.592233\n","\n","def my_func_graph(x, y):\n","    # create gate\n","    a = Logistic()\n","    b = Logistic()\n","    c = Add()\n","    d = Add()\n","    e = Times()\n","    f = Add()\n","    g = Add()\n","    h = Inverse()\n","    i = Times()\n","    \n","    #################################\n","    # WRITE YOUR CODE HERE\n","    # forward for function value\n","    a_fwd = a.forward(y)\n","    b_fwd = b.forward(x)\n","    c_fwd = c.forward(x,y)\n","    d_fwd = d.forward(x,y)\n","    e_fwd = e.forward(c_fwd,d_fwd)\n","    f_fwd = f.forward(x,a_fwd)\n","    g_fwd = g.forward(b_fwd,e_fwd)\n","    h_fwd = h.forward(g_fwd)\n","    i_fwd = i.forward(f_fwd,h_fwd)\n","    #################################\n","    \n","    #################################\n","    # WRITE YOUR CODE HERE\n","    # backward for derivative\n","    i_bwd = i.backward(1)\n","    h_bwd = h.backward(i_bwd[1])\n","    g_bwd = g.backward(h_bwd)\n","    f_bwd = f.backward(i_bwd[0])\n","    e_bwd = e.backward(g_bwd[1])\n","    d_bwd = d.backward(e_bwd[1])\n","    c_bwd = c.backward(e_bwd[0])\n","    b_bwd = b.backward(g_bwd[0])\n","    a_bwd = a.backward(f_bwd[1])\n","    \n","    dx = f_bwd[0]+b_bwd+c_bwd[0]+d_bwd[0]\n","    dy = a_bwd+c_bwd[1]+d_bwd[1]\n","    #################################\n","    \n","    return i_fwd, dx, dy\n","\n","print(\"Analytic  : f={:f}, dx={:f}, dy={:f}\".format(my_func(x,y), *dmy_func(x,y)))\n","print(\"Numerical : f={:f}, dx={:f}, dy={:f}\".format(my_func(x,y), *dmy_func_numer(x,y)))\n","print(\"Graph     : f={:f}, dx={:f}, dy={:f}\".format(*my_func_graph(x, y)))\n","\n","##############################################################################\n","# CS231n: Convolutional Neural Networks for Visual Recognition\n","# Backpropagation, Intuitions \n","# http://cs231n.github.io/optimization-2/\n","# 아래 코드는 해당 함수를 CS231n이라는 스탠포드 대학 수업에서 제공하는 것\n","# 결과 확인을 위해 CS231n의 코드 결과와 비교 해본다.\n","# 결과는 모두 동일해야함\n","##############################################################################\n","import math\n","x = 3 # example values\n","y = -4\n","\n","# forward pass\n","sigy = 1.0 / (1 + math.exp(-y)) # sigmoid in numerator   #(1)\n","num = x + sigy # numerator                               #(2)\n","sigx = 1.0 / (1 + math.exp(-x)) # sigmoid in denominator #(3)\n","xpy = x + y                                              #(4)\n","xpysqr = xpy**2                                          #(5)\n","den = sigx + xpysqr # denominator                        #(6)\n","invden = 1.0 / den                                       #(7)\n","f = num * invden # done!                                 #(8)\n","\n","# backprop f = num * invden\n","dnum = invden # gradient on numerator                             #(8)\n","dinvden = num                                                     #(8)\n","# backprop invden = 1.0 / den \n","dden = (-1.0 / (den**2)) * dinvden                                #(7)\n","# backprop den = sigx + xpysqr\n","dsigx = (1) * dden                                                #(6)\n","dxpysqr = (1) * dden                                              #(6)\n","# backprop xpysqr = xpy**2\n","dxpy = (2 * xpy) * dxpysqr                                        #(5)\n","# backprop xpy = x + y\n","dx = (1) * dxpy                                                   #(4)\n","dy = (1) * dxpy                                                   #(4)\n","# backprop sigx = 1.0 / (1 + math.exp(-x))\n","dx += ((1 - sigx) * sigx) * dsigx # Notice += !! See notes below  #(3)\n","# backprop num = x + sigy\n","dx += (1) * dnum                                                  #(2)\n","dsigy = (1) * dnum                                                #(2)\n","# backprop sigy = 1.0 / (1 + math.exp(-y))\n","dy += ((1 - sigy) * sigy) * dsigy                                 #(1)\n","# done! phew\n","\n","print(\"-------------------------------------------------------\")\n","print(\"cs231n    : f={:f}, dx={:f}, dy={:f}\".format(f, dx, dy))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Analytic  : f=1.545645, dx=2.059570, dy=1.592233\n","Numerical : f=1.545645, dx=2.059570, dy=1.592233\n","Graph     : f=1.545645, dx=2.059570, dy=1.592233\n","-------------------------------------------------------\n","cs231n    : f=1.545645, dx=2.059570, dy=1.592233\n"]}]},{"cell_type":"markdown","metadata":{"id":"0LzUl_fndM6R"},"source":["### 4. 다음 함수에 대한 자동미분\n","\n","$$\n","y = x^{3x+1}, x = 2\n","$$\n","\n","위 함수는 $x^x$꼴로 수업에서 배운 미분법으로 미분할 수 없습니다. 하지만 자동미분을 사용하면 미분할 수 있습니다. 슬라이드에서 제시한 계산 그래프를 보고 이 함수의 백워드 패스를 완성해보세요."]},{"cell_type":"code","metadata":{"id":"StjiQfx_davh"},"source":["####################################\n","# [*] f(x,y) = x^y 를 표현하는 클래스\n","\n","class Powxa :\n","    \"\"\"\n","    x^a의 순전파, 역전파를 구현한 클래스\n","    x와 a 모두 독립변수\n","    \"\"\"\n","    def __init__(self):\n","        self.x = None\n","        self.a = None\n","        self.y = 0.0\n","        self.dx = 0.0\n","        self.da = 0.0\n","        \n","    def __repr__(self):\n","        return \"Powxa\"\n","        \n","    def forward(self, x, a):\n","        self.x = x\n","        self.a = a  \n","        self.y = x**a\n","        \n","        return self.y\n","\n","    def backward(self, dout):\n","        #####################################\n","        # WRITE YOUR CODE HERE\n","        self.dx = self.a*self.x**(self.a-1) * dout\n","        self.da = self.x**self.a * np.log(self.x) * dout\n","        #####################################\n","    \n","        return self.dx, self.da\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"O4qQXkLX92gp"},"source":["클래스가 완성되었다면 직접 포워드 패스와 백워드 패스 코드를 작성하여 결과를 확인하세요. 출력은 다음셀의 첫번째 주석과 일치해야 합니다."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w3aW_pn0gUjO","executionInfo":{"status":"ok","timestamp":1669555666672,"user_tz":-540,"elapsed":2,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"045dc83d-1ecd-4a4f-969b-fa2ea94051bc"},"source":["# 출력\n","# auto diff.: f(2)=128.000000, df(2)=714.168517\n","\n","\n","# x=2에서 포워드, 백워드\n","b = Times()\n","a = Add()\n","y = Powxa()\n","\n","x = 2\n","\n","#####################################\n","# WRITE YOUR CODE HERE\n","# 슬라이드의 함수를 포워드 패스 하세요.\n","# 최종결과를 fv변수에 저장하세요.\n","fv = y.forward(x, a.forward(b.forward(x, 3), 1))\n","#####################################\n","\n","#####################################\n","# WRITE YOUR CODE HERE\n","# 슬라이드의 함수를 백워드 패스 하세요.\n","# 최종결과를 x_back 변수에 저장하세요.\n","y_bak = y.backward(1)\n","a_bak = a.backward(y_bak[1])\n","b_bak = b.backward(a_bak[0])\n","\n","x_bak = b_bak[0]+y_bak[0]\n","#####################################\n","\n","print(f\"auto diff.: f(2)={fv:.6f}, df(2)={x_bak:.6f}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["auto diff.: f(2)=128.000000, df(2)=714.168517\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":38},"id":"B6tQG4QKg8Rv","executionInfo":{"status":"ok","timestamp":1669555668527,"user_tz":-540,"elapsed":272,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"9c7e6662-4a82-4ad0-dc6e-fb50be23a385"},"source":["# 심파이로 정답확인\n","symbol_x = sympy.Symbol('x')\n","\n","sympy.simplify(sympy.diff(symbol_x**(3*symbol_x+1), symbol_x))"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["x**(3*x)*(3*x*log(x) + 3*x + 1)"],"text/latex":"$\\displaystyle x^{3 x} \\left(3 x \\log{\\left(x \\right)} + 3 x + 1\\right)$"},"metadata":{},"execution_count":57}]},{"cell_type":"code","metadata":{"id":"-tvch6YMg-Tp"},"source":["# 위 심파이에서 나온 도함수를 가지고 직접 함수와 도함수를 코딩\n","def f(x):\n","    return x**(3*x+1)\n","\n","def df(x):\n","    return x**(3*x) * (3*x*np.log(x) + 3*x + 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sbz8ZTtNhDEp","executionInfo":{"status":"ok","timestamp":1669555672056,"user_tz":-540,"elapsed":3,"user":{"displayName":"조준우","userId":"07581913480846489655"}},"outputId":"abec68fe-e131-4c51-9caf-69f0047cd0e4"},"source":["print(f\"analytic diff.: f(2)={f(2):.6f}, df(2)={df(2):.6f}\")"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["analytic diff.: f(2)=128.000000, df(2)=714.168517\n"]}]},{"cell_type":"code","metadata":{"id":"YVd3GsTahDjl"},"source":[],"execution_count":null,"outputs":[]}]}
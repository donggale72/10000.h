{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d2c3def7",
   "metadata": {},
   "source": [
    "### 비디오 영상 출력"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "452edb25",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "\n",
    "capture = cv2.VideoCapture('images/video.mp4')\n",
    "# 1초 = 1000ms , 일반적으로 동영상은 1초당 30 frame\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "    \n",
    "    cv2.imshow(\"video\", frame)\n",
    "    \n",
    "    key = cv2.waitKey(10)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "677cec25",
   "metadata": {},
   "source": [
    "### 컬러 이미지를 Gray로 바꾸기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "73e99400",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "capture = cv2.VideoCapture('images/video.mp4')\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "    #################################################################\n",
    "    frame = cv2.pyrDown(frame)   # 비디오 크기를 1/2로 줄임\n",
    "    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    frame_gray = cv2.cvtColor(frame_gray, cv2.COLOR_GRAY2BGR)\n",
    "\n",
    "    frame_dst = cv2.vconcat([frame, frame_gray])\n",
    "    #################################################################\n",
    "    cv2.imshow('dst',frame_dst)\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d8b4ad8",
   "metadata": {},
   "source": [
    "#### 이미지 자르기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b987841f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "capture = cv2.VideoCapture('images/video.mp4')\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    height, width = frame.shape[:2]\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "    ############################################################\n",
    "    frame_gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)\n",
    "    frame_gray = cv2.cvtColor(frame_gray, cv2.COLOR_GRAY2BGR)\n",
    "    \n",
    "    orange = (39,127,255)\n",
    "    h1 = int(height / 4); h2 = int(3 * height / 4)\n",
    "    w1 = int(width / 4);  w2 = int(3 * width / 4)\n",
    "    \n",
    "    frame_gray[h1:h2, w1:w2, :] = frame[h1:h2, w1:w2, :]\n",
    "    \n",
    "    cv2.rectangle(frame_gray, (w1,h1),(w2,h2), orange, 2)\n",
    "    ############################################################\n",
    "    cv2.imshow('dst',frame_gray)\n",
    "\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "45791cbd",
   "metadata": {},
   "source": [
    "- 원본 사이즈는 Gray로\n",
    "- 1/2로 줄인영상은 칼라로 \n",
    "- 1/2(W,H) 에 1/2로 줄인영상 붙이기\n",
    "- 바깥은 gray 안쪽은 1/2영상"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "13905903",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "capture = cv2.VideoCapture('images/video.mp4')\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "    \n",
    "    #################################################################\n",
    "    height, width = frame.shape[:2]\n",
    "    frame_half = cv2.pyrDown(frame)   # 비디오 크기를 1/2로 줄임\n",
    "    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n",
    "    frame_gray = cv2.cvtColor(frame_gray, cv2.COLOR_GRAY2BGR)\n",
    "    h1, w1 = frame_half.shape[:2]\n",
    "    h = int(height/4); w=int(width/4) \n",
    "    frame_gray[ h:h+h1,w:w+w1, :] = frame_half\n",
    "    #################################################################\n",
    "       \n",
    "    cv2.imshow('dst',frame_gray)\n",
    "\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98e65514",
   "metadata": {},
   "source": [
    "- 이 TEST영상에만 적용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "3e724fda",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "capture = cv2.VideoCapture('images/video.mp4')\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "    #################################################################\n",
    "    height, width = frame.shape[:2]\n",
    "    frame_half = cv2.pyrDown(frame)   # 비디오 크기를 1/2로 줄임\n",
    "    frame_gray = np.uint8(cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)*0.3)\n",
    "    frame_gray = cv2.cvtColor(frame_gray, cv2.COLOR_GRAY2BGR)\n",
    "    h1, w1 = frame_half.shape[:2]\n",
    "    h = int(height/4); w=int(width/4) \n",
    "    frame_gray[ h+int(h1/8):h+int(h1*7/8),w:w+w1, :] = frame_half[int(h1/8):int(h1*7/8),:,:]\n",
    "    #################################################################    \n",
    "        \n",
    "    cv2.imshow('dst',frame_gray)\n",
    "\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb8edc06",
   "metadata": {},
   "source": [
    "### 역상(reverse Image)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c3b54f3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "\n",
    "capture = cv2.VideoCapture('images/video.mp4')\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "    ############################################\n",
    "    frame = cv2.bitwise_not(frame)\n",
    "    ############################################\n",
    "    cv2.imshow(\"video\", frame)\n",
    "    key = cv2.waitKey(10)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79208cd0",
   "metadata": {},
   "source": [
    "### 비디오 저장하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "73711f4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "동영상 종료\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "capture = cv2.VideoCapture('images/challenge.mp4')\n",
    "codec = cv2.VideoWriter_fourcc('m','p','4','v') # .mp4\n",
    "# codec = cv2.VideoWriter_fourcc(*'XVID') # .avi\n",
    "\n",
    "width = round(capture.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "height = round(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "fps = capture.get(cv2.CAP_PROP_FPS)\n",
    "\n",
    "video = cv2.VideoWriter(\"images/output.mp4\", codec, fps, (width, height))\n",
    "\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "\n",
    "    #### 1. Gray 로 변환  ############################\n",
    "    frame_gray = cv2.cvtColor(frame, cv2.COLOR_RGB2GRAY)\n",
    "    frame_gray = cv2.cvtColor(frame_gray, cv2.COLOR_GRAY2BGR)\n",
    "\n",
    "    video.write(frame_gray)\n",
    "    ################################\n",
    "    cv2.imshow('dst',frame_gray)\n",
    "\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "video.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9587dcf0",
   "metadata": {},
   "source": [
    "### 차선 추출하기 # 1 - 노란색, 하얀색 차선 추출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "592b894e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "동영상 종료\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "capture = cv2.VideoCapture('images/challenge.mp4')\n",
    "# codec = cv2.VideoWriter_fourcc('m','p','4','v') # .mp4\n",
    "codec = cv2.VideoWriter_fourcc(*'XVID') # .avi\n",
    "\n",
    "width = round(capture.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "height = round(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "fps = capture.get(cv2.CAP_PROP_FPS)\n",
    "\n",
    "video = cv2.VideoWriter(\"challenge_gray.avi\", codec, fps, (width, height))\n",
    "\n",
    "lower_yellow = (20, 125, 130)  # 자료형은 튜플형태로(H, S, V)\n",
    "upper_yellow = (40, 255, 255)  # 자료형은 튜플형태로(H, S, V)\n",
    "\n",
    "lower_white = (200, 200, 200)  \n",
    "upper_white = (255, 255, 255)\n",
    "\n",
    "\n",
    "while True:\n",
    "    # 영상 끝나면 다시 처음으로 ... 재생 반복\n",
    "    #     if capture.get(cv2.CAP_PROP_POS_FRAMES) == capture.get(cv2.CAP_PROP_FRAME_COUNT):\n",
    "    #        capture.set(cv2.CAP_PROP_POS_FRAMES, 0)\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "\n",
    "    #### 1. Gray 로 변환  ############################\n",
    "    frame_hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n",
    "\n",
    "\n",
    "    mask_yellow = cv2.inRange(frame_hsv, lower_yellow, upper_yellow)\n",
    "    mask_white = cv2.inRange(frame,lower_white,upper_white)\n",
    "\n",
    "    mask_lane = cv2.addWeighted(mask_yellow, 1.0, mask_white, 1.0, 0)\n",
    "    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (7, 7))\n",
    "    mask_lane = cv2.morphologyEx(mask_lane, cv2.MORPH_CLOSE, kernel, iterations=2)\n",
    "\n",
    "    frame_hsv = cv2.bitwise_and(frame_hsv, frame_hsv, mask=mask_lane)\n",
    "\n",
    "    frame_dst = cv2.cvtColor(frame_hsv, cv2.COLOR_HSV2BGR)\n",
    "    cv2.putText(frame_dst, \\\n",
    "        f'{int(capture.get(cv2.CAP_PROP_POS_FRAMES)):03d}:{int(capture.get(cv2.CAP_PROP_FRAME_COUNT)):03d}',\\\n",
    "                (10,height-30), cv2.FONT_HERSHEY_COMPLEX, 0.6, (150, 150, 150), 1)\n",
    "    ################################\n",
    "    video.write(frame_dst)\n",
    "    cv2.imshow('dst',frame_dst)\n",
    "    ################################\n",
    "\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "video.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b3f2e020",
   "metadata": {},
   "source": [
    "### 영역 자르기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "dc07fa17",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "capture = cv2.VideoCapture('images/challenge.mp4')\n",
    "### 비디오 저장을 위한 코덱 지정\n",
    "# codec = cv2.VideoWriter_fourcc('m','p','4','v') # .mp4\n",
    "codec = cv2.VideoWriter_fourcc(*'XVID') # .avi\n",
    "\n",
    "##### 동영상에 대한 정보를 획득\n",
    "width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "fps = int(capture.get(cv2.CAP_PROP_FPS))\n",
    "\n",
    "trap_top_width_p1 = 0.45\n",
    "trap_top_width_p2 = 0.55\n",
    "trap_bottom_width_p1 = 0.0\n",
    "trap_bottom_width_p2 = 1.0\n",
    "trap_height_p1 = 0.57\n",
    "trap_height_p2 = 1.0\n",
    "\n",
    "pts = np.array([[int(width*trap_bottom_width_p1),int(height*trap_height_p2)],\n",
    "                [int(width*trap_top_width_p1),int(height*trap_height_p1)],\n",
    "                [int(width*trap_top_width_p2),int(height*trap_height_p1)],\n",
    "                [int(width*trap_bottom_width_p2),int(height*trap_height_p2)]],dtype=np.int32)\n",
    "\n",
    "### 비디오 저장을 위한 파라미터 적용\n",
    "video = cv2.VideoWriter(\"images/output.avi\", codec, fps, (width,height))\n",
    "lower_yellow = (20, 120, 120)\n",
    "upper_yellow = (40, 255, 255)\n",
    "lower_white = (200, 200, 200)\n",
    "upper_white = (255, 255, 255)\n",
    "\n",
    "img_mask = np.zeros((height,width,3), dtype=np.uint8)\n",
    "img_mask = cv2.fillPoly(img_mask,[pts], (255,255,255))\n",
    "\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "\n",
    "    frame_bgr = cv2.bitwise_and(frame,img_mask)\n",
    "    #### 1. HSV 로 변환  ############################\n",
    "    frame_hsv = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2HSV)\n",
    "\n",
    "    mask_yellow = cv2.inRange(frame_hsv, lower_yellow, upper_yellow) # yellow는 hsv에서 적용\n",
    "    mask_white = cv2.inRange(frame_bgr, lower_white, upper_white) # white는 bgr에서 적용\n",
    "\n",
    "    mask_lane = cv2.addWeighted(mask_yellow, 1.0, mask_white, 1.0, 0.0)\n",
    "    # mask_lane의 성능을 개선하기 위해서 모폴로지 적용\n",
    "    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))\n",
    "    mask_lane = cv2.morphologyEx(mask_lane, cv2.MORPH_CLOSE, kernel, iterations=2)\n",
    "\n",
    "    frame_hsv = cv2.bitwise_and(frame_hsv, frame_hsv, mask=mask_lane)\n",
    "\n",
    "    frame_dst = cv2.cvtColor(frame_hsv, cv2.COLOR_HSV2BGR)\n",
    "    ################################\n",
    "    cv2.polylines(frame_dst, [pts], True, (0, 255, 255), 2)\n",
    "#     video.write(frame_dst)\n",
    "    cv2.imshow('dst',frame_dst)\n",
    "    ################################\n",
    "    cv2.polylines(frame_bgr, [pts], True, (0, 255, 255), 2)\n",
    "#     video.write(frame_dst)\n",
    "    cv2.imshow('src',frame_bgr)\n",
    "    ################################\n",
    "\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "video.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "003d7b8b",
   "metadata": {},
   "source": [
    "### 차선추출 완료"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "7ea9c55b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "동영상 종료\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "trap_top_width_p1 = 0.45\n",
    "trap_top_width_p2 = 0.55\n",
    "trap_bottom_width_p1 = 0.0\n",
    "trap_bottom_width_p2 = 1.0\n",
    "trap_height_p1 = 0.6\n",
    "trap_height_p2 = 1.0\n",
    "\n",
    "rho = 10\n",
    "theta = 1 * np.pi / 180\n",
    "threshold = 50\n",
    "min_line_length = 10\n",
    "max_line_gap = 30\n",
    "\n",
    "\n",
    "def draw_lines(img, lines, color=[0,255,0], thickness=12):\n",
    "    # 예외처리\n",
    "    if (lines is None) or (len(lines) == 0):\n",
    "        return\n",
    "\n",
    "    # 왼쪽, 오른쪽 라인을 그릴것인지 체크\n",
    "    left_draw_check = True\n",
    "    right_draw_check = True\n",
    "\n",
    "    # 모든선(lines)의 기울기를 체크해서 불필요한 선 제거\n",
    "    # 기울기 임계값 보다 기울기가 작은 선은 제거\n",
    "    slope_threshold = 0.5 # 기울기 30도\n",
    "    slopes=[]\n",
    "    new_lines=[]\n",
    "\n",
    "    # 기울기가 작은 라인 제거\n",
    "    # lines 변수는 (N, 1, 4)차원 형태를 가짐.\n",
    "    for line in lines:\n",
    "        x1,y1,x2,y2 = line[0] # line = [[x1,y1,x2,y2]]\n",
    "        # 기울기 계산\n",
    "        if x2-x1 == 0.:\n",
    "            slope = 999\n",
    "        else:\n",
    "            slope = (y2-y1)/(x2-x1)\n",
    "        if abs(slope) > slope_threshold:\n",
    "            slopes.append(slope)\n",
    "            new_lines.append(line)\n",
    "\n",
    "    lines = new_lines   # 조건을 만족하는 line만 걸러냄\n",
    "\n",
    "    ### 오른쪽 / 왼쪽 라인 분리\n",
    "    # 기울기 및 선을 구성하는 두점이 영상의 가운데를 기준으로 좌우에 분포하는지 체크\n",
    "    left_lines = []\n",
    "    right_lines = []\n",
    "\n",
    "    for i, line in enumerate(lines):\n",
    "        x1, y1, x2, y2 = line[0]  # line = [[x1,y1,x2,y2]]\n",
    "        img_center = img.shape[1]/2 # width\n",
    "        # 기울기 방향이 바뀜 : y의 좌표가 위에서 아래로 내려옴\n",
    "\n",
    "        if slopes[i]  > 0 and x1 > img_center and x2 > img_center: # right\n",
    "            right_lines.append(line)\n",
    "        elif slopes[i] < 0 and x1 < img_center and x2 < img_center: # left\n",
    "            left_lines.append(line)\n",
    "\n",
    "    ## LEFT / RIGHT 라인을 구성하는 점들을 사용해서 np.polyfit을 적용\n",
    "    # np.polyfit에 사용될 점으로 추가\n",
    "\n",
    "    # LEFT 찾기\n",
    "    left_lines_x = []\n",
    "    left_lines_y = []\n",
    "\n",
    "    for line in left_lines:\n",
    "        x1,y1,x2,y2 = line[0] # line = [[x1,y1,x2,y2]]\n",
    "        left_lines_x.append(x1)\n",
    "        left_lines_x.append(x2)\n",
    "        left_lines_y.append(y1)\n",
    "        left_lines_y.append(y2)\n",
    "\n",
    "    if len(left_lines_x) > 0:\n",
    "        left_m, left_b = np.polyfit(left_lines_x, left_lines_y, 1) # y = m*x + b\n",
    "    else:\n",
    "        left_m, left_b = 1,1\n",
    "        left_draw_check = False\n",
    "\n",
    "    # RIGHT 찾기\n",
    "    right_lines_x = []\n",
    "    right_lines_y = []\n",
    "\n",
    "    for line in right_lines:\n",
    "        x1, y1, x2, y2 = line[0]  # line = [[x1,y1,x2,y2]]\n",
    "        right_lines_x.append(x1)\n",
    "        right_lines_x.append(x2)\n",
    "        right_lines_y.append(y1)\n",
    "        right_lines_y.append(y2)\n",
    "\n",
    "    if len(right_lines_x) > 0:\n",
    "        right_m, right_b = np.polyfit(right_lines_x, right_lines_y, 1)  # y = m*x + b\n",
    "    else:\n",
    "        right_m, right_b = 1, 1\n",
    "        right_draw_check = False\n",
    "\n",
    "    # 왼쪽과 오른쪽의 각각 2개의 점 찾기\n",
    "    # y값은 알고 있음, x값만 찾으면 됨\n",
    "    y1 = int(img.shape[0]) # height\n",
    "    y2 = int(img.shape[0]*trap_height_p1)\n",
    "\n",
    "    right_x1 = int((y1-right_b) / right_m)\n",
    "    right_x2 = int((y2-right_b) / right_m)\n",
    "    left_x1 = int((y1-left_b) / left_m)\n",
    "    left_x2 = int((y2-left_b) / left_m)\n",
    "\n",
    "    # 차선그리기\n",
    "    if right_draw_check:\n",
    "        cv2.line(img,(right_x1,y1),(right_x2,y2), color, thickness)\n",
    "    if left_draw_check:\n",
    "        cv2.line(img,(left_x1,y1),(left_x2,y2), color, thickness)\n",
    "\n",
    "\n",
    "capture = cv2.VideoCapture('images/challenge.mp4')\n",
    "### 비디오 저장을 위한 코덱 지정\n",
    "# codec = cv2.VideoWriter_fourcc('m','p','4','v') # .mp4\n",
    "codec = cv2.VideoWriter_fourcc(*'XVID') # .avi\n",
    "\n",
    "##### 동영상에 대한 정보를 획득\n",
    "width = int(capture.get(cv2.CAP_PROP_FRAME_WIDTH))\n",
    "height = int(capture.get(cv2.CAP_PROP_FRAME_HEIGHT))\n",
    "fps = int(capture.get(cv2.CAP_PROP_FPS))\n",
    "\n",
    "pts = np.array([[int(width*trap_bottom_width_p1),int(height*trap_height_p2)],\n",
    "                [int(width*trap_top_width_p1),int(height*trap_height_p1)],\n",
    "                [int(width*trap_top_width_p2),int(height*trap_height_p1)],\n",
    "                [int(width*trap_bottom_width_p2),int(height*trap_height_p2)]],dtype=np.int32)\n",
    "\n",
    "### 비디오 저장을 위한 파라미터 적용\n",
    "video = cv2.VideoWriter(\"images/output.avi\", codec, fps, (width,height))\n",
    "lower_yellow = (20, 120, 120)\n",
    "upper_yellow = (40, 255, 255)\n",
    "lower_white = (200, 200, 200)\n",
    "upper_white = (255, 255, 255)\n",
    "\n",
    "# img_mask = np.zeros((height,width,3), dtype=np.uint8)\n",
    "# img_mask = cv2.fillPoly(img_mask,[pts], (255,255,255))\n",
    "#cv2.imshow(\"mask\",img_mask)\n",
    "\n",
    "img_mask = np.zeros((height,width), dtype=np.uint8)\n",
    "img_mask = cv2.fillPoly(img_mask,[pts], 255)\n",
    "#cv2.imshow(\"mask\",img_mask)\n",
    "\n",
    "while True:\n",
    "    ret, frame = capture.read()\n",
    "    if ret == False:\n",
    "        print('동영상 종료')\n",
    "        break\n",
    "\n",
    "    frame_bgr = frame.copy()\n",
    "    # frame_bgr = cv2.bitwise_and(frame,img_mask)\n",
    "    #### 1. HSV 로 변환  ############################\n",
    "    frame_hsv = cv2.cvtColor(frame_bgr, cv2.COLOR_BGR2HSV)\n",
    "\n",
    "    mask_yellow = cv2.inRange(frame_hsv, lower_yellow, upper_yellow) # yellow는 hsv에서 적용\n",
    "    mask_white = cv2.inRange(frame_bgr, lower_white, upper_white) # white는 bgr에서 적용\n",
    "\n",
    "    mask_lane = cv2.addWeighted(mask_yellow, 1.0, mask_white, 1.0, 0.0)\n",
    "    # mask_lane의 성능을 개선하기 위해서 모폴로지 적용\n",
    "    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))\n",
    "    mask_lane = cv2.morphologyEx(mask_lane, cv2.MORPH_CLOSE, kernel, iterations=2) # mask_lane -> (720,1280,1)\n",
    "\n",
    "    # 외각선 구하기 : Canny엣지사용\n",
    "    frame_canny = cv2.Canny(mask_lane, 50,150)\n",
    "    frame_canny = cv2.bitwise_and(frame_canny, frame_canny, mask=img_mask)\n",
    "\n",
    "    # 외곽선을 기준으로 선을 추출\n",
    "    lines = cv2.HoughLinesP(frame_canny, rho, theta, threshold, minLineLength=min_line_length, maxLineGap=max_line_gap)\n",
    "    draw_lines(frame_bgr, lines)\n",
    "\n",
    "    cv2.polylines(frame_bgr, [pts], True, (255, 0, 0), 1)\n",
    "    ################################\n",
    "    video.write(frame_bgr)\n",
    "    cv2.imshow('dst',frame_bgr)\n",
    "    ################################\n",
    "\n",
    "    key = cv2.waitKey(25)\n",
    "    if key == 27: # Esc키\n",
    "        break;\n",
    "\n",
    "capture.release()\n",
    "video.release()\n",
    "cv2.destroyAllWindows()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5f0b61e5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
